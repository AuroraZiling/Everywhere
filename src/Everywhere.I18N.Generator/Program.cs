using System.Security;
using nietras.SeparatedValues;

var tsvPath = Path.GetFullPath(args[0]);
if (!File.Exists(tsvPath)) throw new FileNotFoundException("TSV file not found", tsvPath);
await using var localeManagerWriter = new StreamWriter(File.Create(Path.Combine(args[1], "LocaleManager.cs")));
await localeManagerWriter.WriteLineAsync(
    $$"""
      // Generated by Everywhere.I18N.Generator, do not edit manually
      // Edit {{tsvPath}} instead, run the generator or build project to update this file

      using global::System.Diagnostics.CodeAnalysis;
      using global::Avalonia.Controls;

      namespace Everywhere.I18N;

      public static class LocaleManager
      {
          public static IEnumerable<string> AvailableLocaleNames => Locales.Keys;

          private static readonly Dictionary<string, ResourceDictionary> Locales = new();

          static LocaleManager()
          {
      """);

using var reader = await new Sep('\t').Reader().FromFileAsync(tsvPath);
for (var col = 0; col < reader.Header.ColNames.Count; col++)
{
    var localeName = reader.Header.ColNames[col];
    var escapedLocaleName = localeName.Replace('-', '_');
    var targetFilePath = Path.Combine(args[1], localeName + ".axaml");
    await using var writer = new StreamWriter(File.Create(targetFilePath));
    await writer.WriteAsync(
        $"""
         <!-- Generated by Everywhere.I18N.Generator, do not edit manually -->
         <!-- Edit {tsvPath} instead, run the generator or build project to update this file -->
         <ResourceDictionary 
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         """);
    if (col > 0) await writer.WriteLineAsync($"\n    x:Class=\"Everywhere.I18N.{escapedLocaleName}\">");
    else await writer.WriteLineAsync(">");

    await foreach (var row in await new Sep('\t').Reader(o => o with { DisableColCountCheck = true }).FromFileAsync(tsvPath))
    {
        if (col >= row.ColCount) continue;
        var key = row[0].ToString();
        var value = row[col].ToString();
        writer.Write("    <x:String x:Key=\"");
        writer.Write(SecurityElement.Escape(key));
        writer.Write("\">");
        writer.Write(SecurityElement.Escape(value));
        writer.WriteLine("</x:String>");
        await writer.FlushAsync();
    }

    await writer.WriteLineAsync("</ResourceDictionary>");

    if (col > 0)
    {
        await File.WriteAllTextAsync(
            targetFilePath + ".cs",
            $"""
             namespace Everywhere.I18N;

             public class {escapedLocaleName} : global::Avalonia.Controls.ResourceDictionary;
             """);

        await localeManagerWriter.WriteLineAsync($"        Locales.Add(\"{localeName}\", new {escapedLocaleName}());");
    }
}

await localeManagerWriter.WriteLineAsync(
    """
        }

        [field: AllowNull, MaybeNull]
        public static string CurrentLocale
        {
            get;
            set
            {
                if (field == value) return;
        
                var app = Application.Current!;
                if (field != null && Locales.TryGetValue(field, out var oldLocale))
                {
                    app.Resources.MergedDictionaries.Remove(oldLocale);
                }
                
                field = value;
                if (!Locales.TryGetValue(value, out var newLocale))
                {
                    newLocale = Locales.Values.First();
                }
                app.Resources.MergedDictionaries.Add(newLocale);
            }
        }
    }
    """);

Console.WriteLine("Everywhere.I18N.Generator finished");